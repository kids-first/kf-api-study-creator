# Generated by Django 2.2.13 on 2021-03-30 19:59

import creator.ingest_runs.models.validation_run
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_fsm
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('jobs', '0001_move_jobs'),
        ('data_reviews', '0001_initial'),
        ('ingest_runs', '0002_refactor_to_ingest_process'),
    ]

    operations = [
        migrations.CreateModel(
            name='ValidationRun',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4,
                                        editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True,
                                                    help_text='Time when the ingest process was created', null=True)),
                ('started_at', models.DateTimeField(
                    help_text='Time when ingest process started running', null=True)),
                ('stopped_at', models.DateTimeField(
                    help_text='Time when ingest process stopped running', null=True)),
                ('input_hash', models.UUIDField(blank=True, editable=False,
                                                help_text='Identifies an ingest process execution by its input parameters. Autopopulated on save with the MD5 hash of all of the ingest process input parameters.', null=True)),
                ('state', django_fsm.FSMField(default='not_started',
                                              help_text='The current state of the ingest process', max_length=50)),
                ('success', models.BooleanField(blank=True, default=False,
                                                help_text='Whether the validation run resulted in all tests passing', null=True)),
                ('progress', models.IntegerField(blank=True, default=0,
                                                 help_text='The the percentage of the validation run that has been completed', null=True)),
                ('creator', models.ForeignKey(blank=True, help_text='The user who submitted this ingest process', null=True,
                                              on_delete=django.db.models.deletion.SET_NULL, related_name='validationruns', related_query_name='validationrun', to=settings.AUTH_USER_MODEL)),
                ('data_review', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                                  related_name='validation_runs', to='data_reviews.DataReview')),
                ('job_log', models.OneToOneField(blank=True, help_text='The associated job log detailing the execution for this ingest process', null=True,
                                                 on_delete=django.db.models.deletion.CASCADE, related_name='validationrun', related_query_name='validationrun', to='jobs.JobLog')),
            ],
            options={
                'permissions': [
                    ('list_all_validationrun', 'Show all validation_runs'),
                    ('cancel_validationrun', 'Cancel an validation_run'),
                    (
                        "add_my_study_validationrun",
                        "Can start validation runs for studies user is a member of",
                    ),
                    (
                        "cancel_my_study_validationrun",
                        "Can cancel validation runs for studies user is a member of",
                    ),
                    (
                        "view_my_study_validationrun",
                        "Can view validation runs for studies user is a member of",
                    ),
                ],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ValidationResultset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4,
                                        editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True,
                                                    help_text='Time when the validation result set was created', null=True)),
                ('report_file', models.FileField(blank=True, help_text='Field to track the storage location of the user friendly validation report',
                                                 max_length=512, null=True, upload_to=creator.ingest_runs.models.validation_run._get_upload_directory)),
                ('results_file', models.FileField(blank=True, help_text='Field to track the storage location of the raw validation results',
                                                  max_length=512, null=True, upload_to=creator.ingest_runs.models.validation_run._get_upload_directory)),
                ('passed', models.IntegerField(blank=True, default=0,
                                               help_text='The number of validation tests that passed', null=True)),
                ('failed', models.IntegerField(blank=True, default=0,
                                               help_text='The number of validation tests that failed', null=True)),
                ('did_not_run', models.IntegerField(blank=True, default=0,
                                                    help_text='The number of validation tests that did not run', null=True)),
                ('data_review', models.OneToOneField(blank=True, help_text='The associated data review this validation result set belongs to',
                                                     null=True, on_delete=django.db.models.deletion.CASCADE, related_name='validation_resultset', to='data_reviews.DataReview')),
            ],
            options={
                'permissions': [('list_all_validationresultset', 'Show all validation_resultsets')],
            },
        ),
    ]
