"""
Transform module to merge data generated by
creator.ingest_runs.data_generator.study_generator

This will generate the following Kids First Dataservice entities:
    family
    participant
    biospecimen
    diagnosis
    phenotype
    outcome
    sequencing_experiment
    genomic_file
    biospecimen_genomic_file
    sequencing_experiment_genomic_file
"""
from pandas import DataFrame

from kf_lib_data_ingest.common.concept_schema import CONCEPT  # noqa F401

# Use these merge funcs, not pandas.merge
from kf_lib_data_ingest.common.pandas_utils import (  # noqa F401
    merge_wo_duplicates,
    outer_merge,
)
from kf_lib_data_ingest.config import DEFAULT_KEY


def transform_function(mapped_df_dict):
    """
    Merge clinical and genomic data together
    """
    # Merge participant data together
    df = merge_wo_duplicates(
        mapped_df_dict['family_trio_config.py'],
        mapped_df_dict['participant_config.py'],
        on=CONCEPT.PARTICIPANT.ID,
    )
    df = merge_wo_duplicates(
        df,
        mapped_df_dict['participant_diseases_config.py'],
        on=CONCEPT.PARTICIPANT.ID,
    )
    participant_df = merge_wo_duplicates(
        df,
        mapped_df_dict['participant_phenotypes_config.py'],
        on=CONCEPT.PARTICIPANT.ID,
    )
    # Merge biospecimen dfs together
    bcm_df = mapped_df_dict.get("biospecimen_collection_manifest_config.py")
    bbm_df = mapped_df_dict.get("biobank_manifest_config.py")
    alm_df = mapped_df_dict.get("aliquot_manifest_config.py")

    # Incorporate Biobank Manifest if it exists
    if isinstance(bbm_df, DataFrame):
        bs_df = merge_wo_duplicates(
            bcm_df,
            bbm_df,
            how="left",
            on=CONCEPT.BIOSPECIMEN_GROUP.ID,
        )
    else:
        bs_df = bcm_df

    # Incorporate Aliquot Manifest if it exists
    if isinstance(alm_df, DataFrame):
        bs_df = merge_wo_duplicates(
            bs_df,
            alm_df,
            how="left",
            on=CONCEPT.BIOSPECIMEN.ID,
        )

    # Merge clinical (participant, biospecimen) data together
    bio_df = merge_wo_duplicates(
        participant_df,
        bs_df,
        on=CONCEPT.PARTICIPANT.ID,
    )

    # Merge genomic data together

    # Use the md5 hashes in test data not the etags from the s3 scrape
    # Drop the col, so there will be no merge conflict
    s3_scrape = mapped_df_dict['s3_scrape_config.py']
    if CONCEPT.GENOMIC_FILE.HASH_DICT in s3_scrape.columns:
        s3_scrape.drop(CONCEPT.GENOMIC_FILE.HASH_DICT, axis=1, inplace=True)

    gf_df = merge_wo_duplicates(
        s3_scrape,
        mapped_df_dict['sequencing_manifest_config.py'],
        on=CONCEPT.GENOMIC_FILE.ID,
    )

    # Merge clinical and genomic data
    df = merge_wo_duplicates(
        bio_df,
        gf_df,
        on=CONCEPT.BIOSPECIMEN.ID,
    )

    return {DEFAULT_KEY: df}
